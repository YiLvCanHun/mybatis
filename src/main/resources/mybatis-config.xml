<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
        mybatis 可以使用 properties 标签来因为外部 properties 文件
        resource:引入类路径下的资源
        url:引入网络路径或磁盘路径下的资源

        作为了解,一般 mybatis 的数据源会交给spring托管
    -->
    <properties resource="dbconfig.properties"/>
    
    <settings>
        <!-- 下划线映射驼峰命名 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--
        typeAlias:为某个 java 类起别名
        package:为包下的所有类批量起别名
            name:指定包名,该包下及其子包都起别名,类名小写(其实使用时,并不区分大小写)
            批量起别名的情况下,当出现重复别名时,使用 @Alias("emp") 注释为某个类型指定新的别名,在 javabean 类上使用
    -->
    <!--<typeAlias type="bean.Employee" alias="emp"/>-->
    <typeAliases>
        <package name="com.zp.helloworld.entity"/>
    </typeAliases>

    <!--
        environments:mybatis 可以配置多种环境,default指定使用某种环境,可以达到快速切换环境的效果
            environment:配置一个具体的环境信息,必须有两个标签,
                id:代表当前环境的唯一标识
                transactionManager:事务管理器,作为了解,一般 spring 接管
                    type:事务管理器的类型,JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
                        自定义事务管理器:实现 TransactionFactory接口,type指定为全类名

                    dataSource:数据源
                        type:数据源类型:
                            JNDI(JndiDataSourceFactory),由容器管理数据源
                            POOLED(PooledDataSourceFactory),使用数据库连接池
                            UNPOOLED(UnpooledDataSourceFactory),不使用库连接池
                        自定义数据源:实现 DataSourceFactory接口,type 指定为全类名
    -->
    <environments default="mysql">
        <environment id="mysql">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <environment id="oracle">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${oracle.driver}"/>
                <property name="url" value="${oracle.url}"/>
                <property name="username" value="${oracle.user}"/>
                <property name="password" value="${oracle.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
        5.databaseIdProvider: 用来支持多数据库厂商
        type="DB_VENDOR":VendorDatabaseIdProvider
            作用是得到数据库厂商的标识(驱动),mybatis 就能根据不同的数据库执行不同的 sql
            MySQL,Oracle,SQL Server
        在 mapper 中,使用 databaseId 区分不同的数据库
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的厂商取别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!-- sql映射文件(employeeMapper.xml)注册到全局配置文件(mybatis-config.xml)中 -->
    <mappers>
        <!--
           mapper:注册一个 sql 映射
               注册配置文件:
               resource:引用类路径下的 sql 映射文件
               url:引用网络路径或磁盘路径下的文件

               注册接口:
               class:引用,注册接口
                   1. 有 sql 映射文件,映射文件必须和接口同名,并且放在和接口同一目录下(或者用resource,则没有同一目录限制)
                   2. 没有 sql 映射文件,所有的 sql 都是利用注解写在接口上
                   推荐:比较重要的 Dao 接口,写 sql 映射文件
                        不太重要的 Dao 接口,为了开发快速,可以使用注解
        -->
        <mapper resource="mappings/employeeMapper.xml"/>

        <!-- 批量注册,但需要映射文件和接口在同一目录下
          可以在conf 下也建一个相同的文件夹下,源文件夹都会归于类路径下-->
        <!--<package name="com.zp.helloworld.dao"/>-->
    </mappers>
</configuration>